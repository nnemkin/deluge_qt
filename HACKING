
UI Design Workflow
------------------

Most of the UI is build with Qt Designer (``.ui`` files in ``qtui/ui``).
Python code is generated (using PyQt's pyuic) from ui files and put into single file qtui/generated/ui.py.
The generated code won't work as is and needs postprocessing which is done in pyuic_postprocess.py script.

Qt resources file (``qtui/data/resources.qrc``) exists only for design time work. It's generated automatically
with ``tools/regen_dev.py`` script and contains references to all image files in data/ folder of packages deluge and qtui.

Basically, run ``regen_dev.py`` before editing ui files and also after the ``data/`` directory contents change;
run ``regen_ui.py`` after editing ``.ui`` files to update classes used in code.

Code is written against PyQt 4.5, only QtCore and QtGui are used, for other services (network, xml) python alternatives exist.
Backward compatibility (with PyQt 4.4) will be hacked in using monkey patching, postprocessing and other unsightly techniques.

How to integrate with KDE is not decided yet. Options include: conditional defines, polymorphic classes and postprocessing.


Code Style Bits
---------------

* Top-level module components (imports section, classes, constants and functions) are separated by 2 empty lines.
* Imports are split in groups: stdlib modules, infrastructure modules (PyQt, twisted), deluge core modules, deluge_qt
  modules. Groups are separeted with an empty line.
* Class member order is:

   1. Qt signal declarations,
   2. inner classes, classmethods and staticmethods,
   3. class variable declarations and class block code,
   4. constructor, python methods,
   5. deluge Comonent methods (start, stop, shutdown, update),
   6. Qt member overrides,
   7. Slots (signal handlers).

* PEP-8 is in effect with two exceptions. First, recommended maximum line width is 120 characters.
  Second, methods/variables that are tightly coupled with Qt or defined by Qt follow Qt naming practices.
* Private and protedted variables
* Use ``defer.inlineCallbacks``.
* Use ``super()``.
* Use ``@QtCore.pyqtSlot`` with pythonic signatures to declare signal handlers.
* Use new-style signal connections.


Packaging and building on Windows
---------------------------------

Building libtorrent
===================

NOTE: official libtorrent python binary is linked dynamically against MSVC 2005 runtime.

1) Download and unpack the latest boost.
2) Build it with::

    > bootstrap
    > bjam variant=release link=static threading=multi stage

3) Download and unpack the latest zlib.
4) Build it with::

    > ml /coff /Zi /c contrib\masmx86\inffas32.asm contrib\masmx86\match686.asm
    > nmake -f win32/Makefile.msc LOC="-DASMV -DASMINF" OBJA="match686.obj inffas32.obj" 
    
5) Set up compilation environment::

    > set INCLUDE=%INCLUDE%;c:\Dev\zlib;c:\Dev\OpenSSL\include;c:\Dev\boost;c:\Dev\Python26\include
    > set LIB=%LIB%;c:\Dev\zlib;c:\Dev\OpenSSL\lib;c:\Dev\boost\stage\lib;c:\Dev\Python26\libs

6) Build::

    > bjam variant=release boost=source link=static boost-link=static geoip=static optimization=speed openssl=pe


Building PyQt
=============

Stock PyQt for Windows is built with GCC (MinGW) compiler and links dynamically to the Qt DLLs.
This is suboptimal because:

* Python 2.6 itself is built with MSVC 2008.
* MSVC generates 20-25% smaller executables.
* Consolidating PyQt modules (See http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/pyqt4ref.html#configuring-pyqt)
  and linking them statically to Qt produces smaller binaries with better load times, because huge Qt import tables
  are eliminated.

Prerequisites:

* Visual C++ 2008 (Express version is OK)
* python virtualenv package

Procedure:

1) Download and unpack the latest Qt source. Configure and build Qt using the following commands::

     > configure -platform win32-msvc2008 -release -opensource -static -ltcg -fast -no-exceptions -no-rtti -no-stl ^
         -no-qt3support -qt-zlib -qt-gif -qt-libpng -qt-libjpeg -no-libmng -no-libtiff -no-sql-sqlite ^
         -no-dsp -no-vcproj -no-openssl -no-phonon -no-multimedia -no-webkit -no-script -no-scripttools -no-declarative ^
         -no-style-cde -no-style-plastique -no-style-cleanlooks -no-style-motif -no-native-gestures
         -nomake tools -nomake examples -nomake demos -nomake docs -nomake translations -saveconfig pyqt
     > nmake

2) Download and unpack sip and PyQt "Windows source" archives (http://www.riverbankcomputing.co.uk/software/sip/download
   and http://www.riverbankcomputing.co.uk/software/pyqt/download).

3) To keep main python installation clean and to avoild conflicts with already installed mingw version of PyQt
   create a dedicated python virtual environment where MSVC versions of PyQt modules will be installed.

4) Launch "Visual Studio 2008 Command Prompt", activate virtualenv, set up environment variables
   (replace paths to Python and Qt with your own)::

     > set PATH=c:\Dev\Qt\qt-vs2008\bin;%PATH%
     > set LIB=%LIB%;c:\Dev\Python26\libs;c:\Dev\Qt\qt-vs2008\lib
     > set INCLUDE=%INCLUDE%;c:\Dev\Python26\include;c:\Dev\Qt\qt-vs2008\include

   All the following steps must use this command prompt.

5) Navigate to the unpacked sip directory, run::

     > python configure.py
     > nmake install

6) Move to the unpacked PyQt directory, run::

     > python configure.py -c -g -eQtCore -eQtGui -eQtSvg -eQtXml -tqtaccessiblewidgets -tqgif -tqjpeg -tqico -tqsvg ^
         -tqcncodecs -tqjpcodecs -tqkrcodecs -tqtwcodecs --no-docstrings --no-designer-plugin --no-sip-files --confirm-license
     > set CL=/bigobj /GL
     > nmake install

7) Resulting packages (QtCore.pyd, QtGui.pyd, _qt.pyd) are in virtualenv/Lib/site-packages/PyQt4.


Packaging Deluge with py2exe
============================

Of all python packagers for windows (py2exe, cx_Freeze, bbfreeze), py2exe provides the best feature set.
Some notes about its use:

* py2exe won't find zope.interface if it is installed with pip. You must use ``easy_install --always-unzip`` to install zope.interface.
  To avoid packaging problems it's best to install all eggs needed by deluge with ``easy_install --always-unzip``.
* py2exe cannot be run from a virtualenv, because virtualenvs have their own distutils package (doing virtualenv magic)
  and py2exe will package it instead of the real one.
* py2exe incorrectly writes ProductVersion string of VERSIONINFO resource (always 1.0.0.1). 

To make eggs and pkg_resources work when with py2exe a trick is used.

* When packaging, modules are scanned for the eggs they're in
  (similar to how bbfreeze does it) and eggs' PKG-INFOs are collected in a dict and put in the packages.pickle file
  along with compiled python modules.
* All resources are listed manually and copied to distribution root (in unpacked form) with py2exe's data_files option.
  Manual listing is necessary because there's no standard mechanism to enumerate egg resources
  without listing a lot of unnecessary files. 
* Custom bootstrap script (bootstrap.py) reads the packaged metadata from packages.pickle and sets up custom metadata providers
  based on it and also sets custom resource providers resolving to distribution root (where resources were copied earlier).


Building installer
==================

Prerequisites:

* Inno Setup 5.3.10+ (unicode) with Inno Setup Preprocessor (ISPP). QuickStart Pack here http://www.jrsoftware.org/isdl.php has both.

Notes:

* Installer uses "Files-In-Use Extension for Inno Setup" from http://raz-soft.com/display-english-posts-only/files-in-use-extension-for-inno-setup/.
  The files are ``win32/files/IssProc.dll`` and ``win32/files/IssProcLanguage.ini``. It works nicely with one exception:
  it's not localized. So please have a look at ``IssProcLanguage.ini`` and fill in some blanks :)

Procedure:

1) Download Microsoft Visual C++ 2008 Redistributable (``vcredist_x86.exe``) from MS website and put in into ``win32/files`` folder.
2) In ``win32`` directory run::
     
     > python setup_exe

   It produces win32/dist folder with py2exe packaged deluge, ready for distribution.
3) Open ``win32/deluge.iss`` with InnoSetup (or ISTool) and build it. The resulting installation package
   is in ``win32/installer`` folder.
